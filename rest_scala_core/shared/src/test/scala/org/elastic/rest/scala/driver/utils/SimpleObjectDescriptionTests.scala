package org.elastic.rest.scala.driver.utils

import utest._
import org.elastic.rest.scala.driver.RestBaseImplicits.CustomTypedToString
import org.elastic.rest.scala.driver.utils.NoJsonHelpers.{SimpleObjectDescription => obj}
import org.elastic.rest.scala.driver.utils.NoJsonHelpers.SimpleObjectDescription
import org.elastic.rest.scala.driver.utils.NoJsonHelpers.SimpleObjectDescription._
import io.circe.parser.parse

object SimpleObjectDescriptionTests extends TestSuite {
  val tests = this {
    "Basic mock functionality - handled" - {

      //TODO: add coverage here

      case class Test
        (field1: String, termName: String, termValue: List[Int], valOrVals: List[String])
        extends CustomTypedToString
      {
        @SimpleObjectDescription("obj",
          obj.SimpleObject("insert_here") (
            obj.Field("field1"),
            obj.Constant("const", true),
            obj.KeyValue("termName")(
              obj.SimpleObject(
                obj.Field("termValue"),
                obj.MultiTypeField("valOrVals")
              )
            ),
            obj.KeyValue("termName", "raw.")(obj.FieldValue("termValue"))
          )
        )
        override def fromTyped: String = AutoGenerated
      }
      val test1 = Test("test", "myTermName", List(1, 2, 3), List())

      /**/
      println(test1.fromTyped)

      parse(test1.fromTyped) ==> parse(
        """{ "insert_here": {
              "field1": "test",
              "const": true,
              "myTermName": {
                "termValue": [ 1, 2, 3 ]
              },
              "raw.myTermName": [ 1, 2, 3 ]
          }
        }""".stripMargin)

      //TODO: prefixes (KV, MT, F), KeyValue with extras, 3x MultiTypeField variants, Option
      //TODO: atomic KeyValue (ie KeyValue("termName")(Raw("termValue") => myTermName: List[1, 2, 3]
      //TODO: option KeyValue

      case class Test2
        (field1: String, maybeField2: Option[String], maybeField3: Option[String])
        extends CustomTypedToString
      {
        @SimpleObjectDescription("",
          SimpleObject("insert_here") (
            Field("field1", "test.prefix."),
            Field("maybeField2"),
            Field("maybeField3")
          )
        )
        override def fromTyped: String = AutoGenerated
      }

      val test2 = Test2("test", None, Some("test"))

      /**/
      println(test2.fromTyped)

      parse(test2.fromTyped) ==> parse(
        """{ "insert_here": {
            "test.prefix.field1": "test",
            "maybeField3": "test"
          }
        }""".stripMargin)

    }
  }
}
